# 1.0 overview
raytracing could mean many things, we are writing
a `path tracer` here, a fairly general one. another
approach is `lumen` which is faster at runtime but
creates worst shadows and has less details compared
to path tracer.

# 4.2 sending rays into the scene
- imagine your screen (viewport) as a grid through which you look into the 3d world
- eye to screen (viewport) distance is known as focal length
- set image width and aspect-ratio and calculate the height, this makes scaling easy
- viewport-width is calculated from viewport-height and actual image aspect ratio
- suggested read https://alvyray.com/Memos/CG/Microsoft/6_pixel.pdf
- 3d coordinates follow the right hand system with -z going into the screen
- image (viewport) coordinates have y axis pointing downwards with top left point being (0,0)
- pixel spacing is the distance between two adjacent pixels, square pixels are standard
- the ray passes through the center of the square pixel
- keep a notebook and pen around when reading/writing graphics, coordinates can be a bit tricky.

# 6.1 shading with surface normals
- surface normals are needed to find at what angle the ray hits the surface
- whether the normals always point outside is a design decision (should use one consistent direction)
- here the normals point outside the surface by default
- if the ray is coming from inside the surface, it will point along the normal at the intersection point, dot product > 0
- if the ray is coming from outside, then it will point against the normal at intersection point, thus dot product < 0

# 6.5 a list of hitable objects

although we pass the ray trom camera through the pixel (while
calculating) it's direction, we do not trace that ray's path from the
ray's point of view, but instead we loop over all the objects check if
any of those objects intersects with the ray, and while we do that we
keep a record of the closest intersection.

so there's a camera and a viewport and a world on the other side of
that viewport. we then pass rays through each pixel and freeze time,
then go over each object in the world (possibly the visible parts of it)
and see which ones we hit... am repeating myself.
